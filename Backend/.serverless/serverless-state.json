{
  "service": {
    "service": "nist-ccc-backend",
    "serviceObject": {
      "name": "nist-ccc-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "ap-south-1",
      "stage": "dev",
      "timeout": 20,
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AdminUnderscoreoperationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/nist-ccc-admin-operation"
            }
          },
          "EmailUnderscoresenderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/nist-ccc-email_sender"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "nist-ccc-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nist-ccc-admin-operation:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nist-ccc-email_sender:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nist-ccc-admin-operation:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nist-ccc-email_sender:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "emailSQS",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "nist-ccc-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AdminUnderscoreoperationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/nist-ccc-backend/dev/1658072765453-2022-07-17T15:46:05.453Z/admin_operation.zip"
              },
              "Handler": "functions/admin_operation.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "nist-ccc-admin-operation",
              "MemorySize": 1024,
              "Timeout": 20,
              "Role": {
                "Fn::GetAtt": [
                  "AdminUnderscoreoperationIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminUnderscoreoperationIamRoleLambdaExecution",
              "AdminUnderscoreoperationLogGroup"
            ]
          },
          "EmailUnderscoresenderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/nist-ccc-backend/dev/1658072765453-2022-07-17T15:46:05.453Z/email_sender.zip"
              },
              "Handler": "functions/email_sender.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "nist-ccc-email_sender",
              "MemorySize": 1024,
              "Timeout": 20,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmailUnderscoresenderLogGroup"
            ]
          },
          "AdminUnderscoreoperationLambdaVersiont1e9obI24TfrsIhuJIBwrKMfwrlZrk3EdE6N3vzSU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminUnderscoreoperationLambdaFunction"
              },
              "CodeSha256": "KhPZYlW9LcApz9I7iSwlEKlbX3OT03MWdAiMKl3wop0="
            }
          },
          "EmailUnderscoresenderLambdaVersionVpeLgIQI0eXD9qH48Rm8ZNnShBzljUWbvM0Qmu9CHg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmailUnderscoresenderLambdaFunction"
              },
              "CodeSha256": "KhPZYlW9LcApz9I7iSwlEKlbX3OT03MWdAiMKl3wop0="
            }
          },
          "NISTUnderscoreCCCUnderscoreStepFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": {
                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-nist-ccc-backend-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "table/Register_Event_User"
                              ]
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "table/Regitser_Event_User"
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "dynamodb",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "table/NIST_CCC_Contact"
                              ]
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:SendMessage"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "emailSQS",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "NISTUnderscoreCCCUnderscoreStepFunction": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"Comment\": \"Nist CCC StepFunction.\",\n  \"StartAt\": \"Contact or Register or Cred\",\n  \"States\": {\n    \"Contact or Register or Cred\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.inputs.check\",\n          \"StringMatches\": \"register\",\n          \"Next\": \"Check User Email\"\n        },\n        {\n          \"Variable\": \"$.inputs.check\",\n          \"StringMatches\": \"contact\",\n          \"Next\": \"Contact\"\n        }\n      ]\n    },\n    \"Check User Email\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:getItem\",\n      \"Parameters\": {\n        \"TableName\": \"Register_Event_User\",\n        \"Key\": {\n          \"emailId\": {\n            \"S.$\": \"$.inputs.email\"\n          }\n        }\n      },\n      \"ResultPath\": \"$.Items\",\n      \"Next\": \"Filter Operation\"\n    },\n    \"Filter Operation\": {\n      \"Type\": \"Choice\",\n      \"Default\": \"Get User Data\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.inputs.verify\",\n          \"IsPresent\": true,\n          \"Next\": \"Verify & Send Data\"\n        },\n        {\n          \"Not\": {\n            \"Variable\": \"$.Items.Item\",\n            \"IsPresent\": true\n          },\n          \"Next\": \"Register User\"\n        }\n      ]\n    },\n    \"Verify & Send Data\": {\n      \"Type\": \"Pass\",\n      \"OutputPath\": \"$.Items\",\n      \"End\": true\n    },\n    \"Register User\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n      \"Parameters\": {\n        \"TableName\": \"Regitser_Event_User\",\n        \"Item\": {\n          \"emailId\": {\n            \"S.$\": \"$.inputs.email\"\n          },\n          \"name\": {\n            \"S.$\": \"$.inputs.name\"\n          },\n          \"branch\": {\n            \"S.$\": \"$.inputs.branch\"\n          },\n          \"rollno\": {\n            \"S.$\": \"$.inputs.rollno\"\n          },\n          \"batch\": {\n            \"S.$\": \"$.inputs.batch\"\n          },\n          \"contact\": {\n            \"S.$\": \"$.inputs.contact\"\n          },\n          \"ticketId\": {\n            \"S.$\": \"$.inputs.ticket\"\n          },\n          \"residence\": {\n            \"S.$\": \"$.inputs.residence\"\n          },\n          \"parent_contact\": {\n            \"S.$\": \"$.inputs.parent_contact\"\n          },\n          \"address\": {\n            \"S.$\": \"$.inputs.address\"\n          },\n          \"section\": {\n            \"S.$\": \"$.inputs.section\"\n          }\n        }\n      },\n      \"ResultPath\": \"$.Items\",\n      \"Next\": \"Email Sender\"\n    },\n    \"Email Sender\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\n      \"Parameters\": {\n        \"MessageBody.$\": \"$.inputs\",\n        \"QueueUrl\": \"${a15dd10806aa7b6b8464199dd1fc9b15}\"\n      },\n      \"End\": true\n    },\n    \"Get User Data\": {\n      \"Type\": \"Pass\",\n      \"OutputPath\": \"$.Items\",\n      \"End\": true\n    },\n    \"Contact\": {\n      \"Type\": \"Parallel\",\n      \"End\": true,\n      \"Branches\": [\n        {\n          \"StartAt\": \"Contact Email Sender\",\n          \"States\": {\n            \"Contact Email Sender\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::sqs:sendMessage\",\n              \"Parameters\": {\n                \"MessageBody.$\": \"$\",\n                \"QueueUrl\": \"${a15dd10806aa7b6b8464199dd1fc9b15}\"\n              },\n              \"End\": true\n            }\n          }\n        },\n        {\n          \"StartAt\": \"Save Contact Data\",\n          \"States\": {\n            \"Save Contact Data\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n              \"Parameters\": {\n                \"TableName\": \"NIST_CCC_Contact\",\n                \"Item\": {\n                  \"emailId\": {\n                    \"S.$\": \"$.inputs.email\"\n                  },\n                  \"fullname\": {\n                    \"S.$\": \"$.inputs.fullname\"\n                  },\n                  \"message\": {\n                    \"S.$\": \"$.inputs.message\"\n                  }\n                }\n              },\n              \"OutputPath\": \"$.SdkResponseMetadata\",\n              \"End\": true\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
                  {
                    "a15dd10806aa7b6b8464199dd1fc9b15": {
                      "Ref": "emailSQS"
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "NISTUnderscoreCCCUnderscoreStepFunctionRole",
                  "Arn"
                ]
              },
              "StateMachineType": "EXPRESS",
              "StateMachineName": "NIST_CCC_StepFunction"
            },
            "DependsOn": [
              "NISTUnderscoreCCCUnderscoreStepFunctionRole",
              "userTable"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-nist-ccc-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceSelection": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "selection",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletehiring": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete_hiring",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete_user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGethiring": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get_hiring",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGeteventuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "geteventuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSelectionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSelection"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSelectionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSelection"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUnderscoreoperationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUnderscoreoperationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletehiringGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletehiring"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUnderscoreoperationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUnderscoreoperationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteuserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUnderscoreoperationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUnderscoreoperationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGethiringGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGethiring"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUnderscoreoperationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUnderscoreoperationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGeteventuserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGeteventuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUnderscoreoperationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUnderscoreoperationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1658072764396": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodSelectionOptions",
              "ApiGatewayMethodSelectionPost",
              "ApiGatewayMethodDeletehiringGet",
              "ApiGatewayMethodDeleteuserGet",
              "ApiGatewayMethodGethiringGet",
              "ApiGatewayMethodGeteventuserGet",
              "ApiGatewayMethodPost"
            ]
          },
          "AdminUnderscoreoperationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminUnderscoreoperationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EmailUnderscoresenderEventSourceMappingSQSEmailSQS": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "emailSQS",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmailUnderscoresenderLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ApiGatewayMethodPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "AuthorizationType": "NONE",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToStepFunctionsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":states:action/StartExecution"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "NISTUnderscoreCCCUnderscoreStepFunction"
                        }
                      }
                    ]
                  },
                  "application/x-www-form-urlencoded": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "NISTUnderscoreCCCUnderscoreStepFunction"
                        }
                      }
                    ]
                  }
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 400
                }
              ]
            }
          },
          "ApigatewayToStepFunctionsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "apigatewaytostepfunctions",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "states:StartExecution"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AdminUnderscoreoperationIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "nist-ccc-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nist-ccc-admin-operation:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Scan"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "userTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "hiringTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "nist-ccc-backend",
                    "dev",
                    "admin_operation",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "emailSQS": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "Email_Trigger"
            }
          },
          "userTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Register_Event_User",
              "AttributeDefinitions": [
                {
                  "AttributeName": "emailId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "emailId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "hiringTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Hiring_Table",
              "AttributeDefinitions": [
                {
                  "AttributeName": "emailId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "emailId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-nist-ccc-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "AdminUnderscoreoperationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminUnderscoreoperationLambdaVersiont1e9obI24TfrsIhuJIBwrKMfwrlZrk3EdE6N3vzSU"
            },
            "Export": {
              "Name": "sls-nist-ccc-backend-dev-AdminUnderscoreoperationLambdaFunctionQualifiedArn"
            }
          },
          "EmailUnderscoresenderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmailUnderscoresenderLambdaVersionVpeLgIQI0eXD9qH48Rm8ZNnShBzljUWbvM0Qmu9CHg"
            },
            "Export": {
              "Name": "sls-nist-ccc-backend-dev-EmailUnderscoresenderLambdaFunctionQualifiedArn"
            }
          },
          "NISTUnderscoreCCCUnderscoreStepFunctionArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "NISTUnderscoreCCCUnderscoreStepFunction"
            },
            "Export": {
              "Name": "sls-nist-ccc-backend-dev-NISTUnderscoreCCCUnderscoreStepFunctionArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-nist-ccc-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-iam-roles-per-function",
      "serverless-step-functions"
    ],
    "pluginsData": {},
    "functions": {
      "admin_operation": {
        "handler": "functions/admin_operation.handler",
        "name": "nist-ccc-admin-operation",
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AdminUnderscoreoperationIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "events": [
          {
            "http": {
              "path": "selection",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": "GET /delete_hiring"
          },
          {
            "http": "GET /delete_user"
          },
          {
            "http": "GET /get_hiring"
          },
          {
            "http": "GET /geteventuser"
          }
        ],
        "package": {
          "artifact": "/Users/debarshimondal/Documents/NIST_CCC/Backend/.serverless/admin_operation.zip"
        },
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AdminUnderscoreoperationLambdaVersiont1e9obI24TfrsIhuJIBwrKMfwrlZrk3EdE6N3vzSU"
      },
      "email_sender": {
        "handler": "functions/email_sender.handler",
        "name": "nist-ccc-email_sender",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][2][\"Resource\"][0]"
              }
            }
          }
        ],
        "package": {
          "artifact": "/Users/debarshimondal/Documents/NIST_CCC/Backend/.serverless/email_sender.zip"
        },
        "memory": 1024,
        "timeout": 20,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EmailUnderscoresenderLambdaVersionVpeLgIQI0eXD9qH48Rm8ZNnShBzljUWbvM0Qmu9CHg"
      }
    },
    "resources": {
      "Resources": {
        "emailSQS": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "Email_Trigger"
          }
        },
        "userTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Register_Event_User",
            "AttributeDefinitions": [
              {
                "AttributeName": "emailId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "emailId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "hiringTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Hiring_Table",
            "AttributeDefinitions": [
              {
                "AttributeName": "emailId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "emailId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "nist-ccc-backend",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!yarn.lock",
          "!package.json",
          "!node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/nist-ccc-backend/dev/code-artifacts",
        "artifactDirectoryName": "serverless/nist-ccc-backend/dev/1658072765453-2022-07-17T15:46:05.453Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "stepFunctions": {
        "stateMachines": {
          "nist_ccc_stepFunctions": {
            "type": "EXPRESS",
            "events": [
              {
                "http": "POST /"
              }
            ],
            "name": "NIST_CCC_StepFunction",
            "definition": {
              "Comment": "Nist CCC StepFunction.",
              "StartAt": "Contact or Register or Cred",
              "States": {
                "Contact or Register or Cred": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.inputs.check",
                      "StringMatches": "register",
                      "Next": "Check User Email"
                    },
                    {
                      "Variable": "$.inputs.check",
                      "StringMatches": "contact",
                      "Next": "Contact"
                    }
                  ]
                },
                "Check User Email": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::dynamodb:getItem",
                  "Parameters": {
                    "TableName": "Register_Event_User",
                    "Key": {
                      "emailId": {
                        "S.$": "$.inputs.email"
                      }
                    }
                  },
                  "ResultPath": "$.Items",
                  "Next": "Filter Operation"
                },
                "Filter Operation": {
                  "Type": "Choice",
                  "Default": "Get User Data",
                  "Choices": [
                    {
                      "Variable": "$.inputs.verify",
                      "IsPresent": true,
                      "Next": "Verify & Send Data"
                    },
                    {
                      "Not": {
                        "Variable": "$.Items.Item",
                        "IsPresent": true
                      },
                      "Next": "Register User"
                    }
                  ]
                },
                "Verify & Send Data": {
                  "Type": "Pass",
                  "OutputPath": "$.Items",
                  "End": true
                },
                "Register User": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::dynamodb:putItem",
                  "Parameters": {
                    "TableName": "Regitser_Event_User",
                    "Item": {
                      "emailId": {
                        "S.$": "$.inputs.email"
                      },
                      "name": {
                        "S.$": "$.inputs.name"
                      },
                      "branch": {
                        "S.$": "$.inputs.branch"
                      },
                      "rollno": {
                        "S.$": "$.inputs.rollno"
                      },
                      "batch": {
                        "S.$": "$.inputs.batch"
                      },
                      "contact": {
                        "S.$": "$.inputs.contact"
                      },
                      "ticketId": {
                        "S.$": "$.inputs.ticket"
                      },
                      "residence": {
                        "S.$": "$.inputs.residence"
                      },
                      "parent_contact": {
                        "S.$": "$.inputs.parent_contact"
                      },
                      "address": {
                        "S.$": "$.inputs.address"
                      },
                      "section": {
                        "S.$": "$.inputs.section"
                      }
                    }
                  },
                  "ResultPath": "$.Items",
                  "Next": "Email Sender"
                },
                "Email Sender": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sqs:sendMessage",
                  "Parameters": {
                    "MessageBody.$": "$.inputs",
                    "QueueUrl": "${a15dd10806aa7b6b8464199dd1fc9b15}"
                  },
                  "End": true
                },
                "Get User Data": {
                  "Type": "Pass",
                  "OutputPath": "$.Items",
                  "End": true
                },
                "Contact": {
                  "Type": "Parallel",
                  "End": true,
                  "Branches": [
                    {
                      "StartAt": "Contact Email Sender",
                      "States": {
                        "Contact Email Sender": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::sqs:sendMessage",
                          "Parameters": {
                            "MessageBody.$": "$",
                            "QueueUrl": "${a15dd10806aa7b6b8464199dd1fc9b15}"
                          },
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "Save Contact Data",
                      "States": {
                        "Save Contact Data": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::dynamodb:putItem",
                          "Parameters": {
                            "TableName": "NIST_CCC_Contact",
                            "Item": {
                              "emailId": {
                                "S.$": "$.inputs.email"
                              },
                              "fullname": {
                                "S.$": "$.inputs.fullname"
                              },
                              "message": {
                                "S.$": "$.inputs.message"
                              }
                            }
                          },
                          "OutputPath": "$.SdkResponseMetadata",
                          "End": true
                        }
                      }
                    }
                  ]
                }
              }
            },
            "dependsOn": [
              "userTable"
            ]
          }
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "stepFunctions": {
      "stateMachines": {
        "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"stepFunctions\"][\"stateMachines\"]"
      },
      "activities": []
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/nist-ccc-backend/dev/1658072765453-2022-07-17T15:46:05.453Z",
    "artifact": ""
  }
}